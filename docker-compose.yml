version: '3'

# Основное приложение
services:
  sniffer:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: sniffer
    network_mode: host
    cap_add:
      - NET_ADMIN
    volumes:
      - sniffer-data:/app/stats
    command: enp0s8
    restart: unless-stopped

  # Telegraf 
  telegraf:
    image: telegraf:latest
    container_name: telegraf
    depends_on:
      - kafka
    volumes:
      - sniffer-data:/data
      - /root/metrics-pipeline/config/telegraf/telegraf.conf:/etc/telegraf/telegraf.conf:ro
      #- ./config/telegraf/telegraf.conf:/etc/telegraf/telegraf.conf:ro
    restart: unless-stopped
 # Zookeeper (необходим для Kafka)
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    restart: unless-stopped

  # Kafka для обработки данных
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    restart: unless-stopped

  # Kafka UI для управления
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      - kafka
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    restart: unless-stopped

volumes:
  sniffer-data:
